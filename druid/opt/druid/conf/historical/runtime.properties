# Node config
druid.host=druidhistorical01
druid.port=8085
#plaintextPort=8085
druid.service=historical

# General configuration
druid.server.tier=_default_tier
druid.server.priority=0

# Storing Segments
druid.segmentCache.locations=[{"path":"/opt/store/druid/indexCache","maxSize"\:112742891520}]
# Default 'true'
druid.segmentCache.deleteOnRemove=true
druid.segmentCache.dropSegmentDelayMillis=30000
druid.segmentCache.announceIntervalMillis=5000
druid.segmentCache.numBootstrapThreads=8
druid.server.maxSize=112742891520

# Load segments
# memory_for_segments = total_memory - heap - direct_memory - jvm_overhead

# Query Configs
# With 4cpu the total numThreads will be 36 (10,136): max(10, (Number of cores * 17) / 16 + 2) + 30
druid.server.http.numThreads=50
druid.server.http.maxIdleTime=PT10m
# default 300000 ms
druid.server.http.defaultQueryTimeout=200000
#druid.query.search.maxSearchLimit=1000
druid.query.search.maxSearchLimit=10000

# GroupBy queries
# v1 version
#druid.query.groupBy.maxIntermediateRows=50000
#druid.query.groupBy.maxResults=500000
#druid.query.groupBy.singleThreaded=false
# v2 version
druid.query.groupBy.defaultStrategy=v2
druid.query.groupBy.bufferGrouperInitialBuckets=0
druid.query.groupBy.bufferGrouperMaxLoadFactor=0
#Maximum amount of heap space (approximately) to use for the string dictionary during merging.
#When the dictionary exceeds this size, a spill to disk will be triggered. (100MB)
druid.query.groupBy.maxMergingDictionarySize=100000000
druid.query.groupBy.maxOnDiskStorage=0
druid.query.groupBy.singleThreaded=false

# Processing threads and buffers. Antes 450MB (471859200)
druid.processing.buffer.sizeBytes=262144000
# Number of cores - 1 (or 1)
druid.processing.numThreads=8
# max(2, druid.processing.numThreads / 4)
druid.processing.numMergeBuffers=2
druid.processing.columnCache.sizeBytes=0
druid.processing.fifo=false
druid.processing.tmpDir=/opt/druid/tmp/historical
# Direct Memory
# Direct_memory=druid.processing.buffer.sizeBytes * (druid.processing.numMergeBuffers + druid.processing.numThreads + 1)

# Caching
# Local cache resides in JVM heap memory, so if you enable it, make sure you increase heap size accordingly.
# Enabling caching on the broker can yield faster results than if query caches were enabled on Historicals for small clusters.
#  (< 20 servers).
druid.historical.cache.useCache=true
druid.historical.cache.populateCache=true
druid.historical.cache.unCacheable=[]
# Caching historical/broker. Sets either in broker or historical if you want to used cache
# groupBy v2 only supports caching on historical nodes
druid.cache.type=local
druid.cache.sizeInBytes=0
druid.cache.initialSize=500000
druid.cache.logEvictionCount=0

